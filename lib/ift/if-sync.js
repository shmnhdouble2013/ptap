/**
 * @file Interface Sync，用于接口文件生成、与wiki同步
 * TODO wiki 同步功能待开发
 * @author huangjia@pinganfang.com
 * @Date  201407
 */
var fs = require('fs'),
    path = require('path'),
    fm = require('util').format;

var DEFAULT_ENCODING = 'utf-8';
/**
 * 模板文件渲染
 *
 * 替换符格式
 *   {#keyword}
 *
 * @param {Object} opt
 * @param {string} opt.tplPath
 * @param {string} [opt.encoding]
 * @param {Object} [opt.data]
 * @returns {string}
 */
function render(opt) {
    var data = opt.data || {};
    var encoding = opt.encoding || DEFAULT_ENCODING;
    var tplPath = opt.tplPath;

    //版权信息
    data.ersync = data.ersync || 'Generated by ift';
    data.author = data.author || 'luics<luics.xu@gmail.com>';
    data.date = data.date || new Date();
    data.copyright = data.copyright || 'Copyright (c) 2013 luics';

    var source = fs.readFileSync(tplPath, encoding);

    return source.replace(/\{#(.+?)\}/g, function(match, key) {//match==$1, key==$2
        var replacer = data[key];
        return ('undefined' == typeof replacer ? '' : replacer);
    });
}

/**
 * 接口文件渲染
 *
 * @param {Object} opt
 * @param {string} opt.dataDir 数据文件(if-data)所在目录
 * @param {Array} opt.files
 * @param {string} opt.title
 * @param {string} opt.savePath 生成的接口文档的保存路径
 * @param {string} [opt.extraHtml]
 */
function ifSync(opt) {
    //var encoding = opt.encoding || DEFAULT_ENCODING;
    var encoding = DEFAULT_ENCODING;
    var extraHtml = opt.extraHtml || '';

    //生成数据接口文件
    var dataInc = [];
    var REQ_TOKEN = 'exports.request = ';
    var RES_TOKEN = 'exports.response = ';
    var RES_ERR_TOKEN = 'exports.responseError = ';

    for (var i = 0; i < opt.files.length; ++i) {
        var dataPath = opt.files[i] + '.js';
        var dataAbsPath = path.join(opt.dataDir, dataPath);
        var data = fs.readFileSync(dataAbsPath, encoding);

        var dataFormatter = require(dataAbsPath);
        var req = dataFormatter.request;
        var cfg = dataFormatter.config || {};
        var method = cfg.method || [];
        for (var j = 0; j < method.length; j++) {
            method[j] = method[j].toUpperCase();
        }

        var isPost = !method.length || method.indexOf('POST') > -1;
        var p = '/' + dataPath.replace(/\\/g, '/').replace(/\.js$/, ''); //windows path seprator
        var url = fm('%s %s', cfg.method ? cfg.method.join(',') : 'POST', cfg.url || p);
        if (!isPost) {
            var qs = [];
            for (var q in req) if (req.hasOwnProperty(q)) {
                qs.push(fm('%s=%s', q, encodeURIComponent(req[q])));
            }
            url += (qs.length ? '?' + qs.join('&') : '');
        }

        /**
         * remove trail, add intent, remove last colon
         */
        function filter(src) {
            return src
                .replace(/^\s*|\s*$/g, '')
                //.replace(/\n/g, '\n    ')
                .replace(/\s*;$/g, '');
        }

        var end;
        end = data.indexOf(RES_TOKEN);
        var reqTxt = filter(data.substring(data.indexOf(REQ_TOKEN) + REQ_TOKEN.length, end > -1 ? end : data.length));
        end = data.indexOf(RES_ERR_TOKEN);
        var resTxt = filter(data.substring(data.indexOf(RES_TOKEN) + RES_TOKEN.length, end > -1 ? end : data.length));
        var resErrTxt = '';
        end = data.length;
        if (data.indexOf(RES_ERR_TOKEN) > -1) {
            resErrTxt = filter(data.substring(data.indexOf(RES_ERR_TOKEN) + RES_ERR_TOKEN.length, end));
        }
        var otherUrl = [];
        cfg.urlDaily && otherUrl.push(fm('* 日常: %s', cfg.urlDaily));
        cfg.urlPrepub && otherUrl.push(fm('* 预发: %s', cfg.urlPrepub));

        var template = [];
        if (cfg.template) {
            template.push('#### Template');
            template.push('');
            for (var t in cfg.template) {
                //template.push(fm('* `%s`: %s', t, cfg.template[t].toLowerCase() === 'response' ? 'Success' : 'Error'));
                template.push(fm('* `%s`: %s', t, cfg.template[t]));
            }
        }
        //console.log(req, res);

        dataInc.push(render({
            tplPath: path.join(__dirname, 'tpl/data.inc.tpl'),
            data: {
                path: p,
                name: cfg.name || '-',
                desc: cfg.desc || '',
                request: reqTxt,
                response: resTxt,
                responseError: resErrTxt,
                requestUrl: url,
                otherUrl: otherUrl.join('\n'),
                template: template.join('\n')
            },
            encoding: encoding
        }));
    }

    var DATA_TPL = path.join(__dirname, 'tpl/data.tpl');
    var content = render({
        tplPath: DATA_TPL,
        data: {
            title: opt.title,
            extraHtml: extraHtml,
            content: dataInc.join('')
        },
        encoding: encoding
    })

    fs.writeFileSync(opt.savePath, content, encoding);
    console.log('[ift] 已生成接口文档', opt.savePath);
}

/**
 * 接口初始化
 *
 * @param {Object} opt
 * @param {Array} opt.root 需要接口初始化的项目的根目录
 */
function ifInit(opt) {
    var root = opt.root;
    var encoding = DEFAULT_ENCODING;

    var demoDirPath = path.join(root, 'demo');
    var dataDirPath = path.join(root, 'demo/data');
    var docDirPath = path.join(root, 'doc');
    var ifConfigPath = path.join(dataDirPath, 'if-config.json');
    var demoDataPath = path.join(dataDirPath, 'demo.js');

    !fs.existsSync(demoDirPath) && fs.mkdirSync(demoDirPath);
    !fs.existsSync(dataDirPath) && fs.mkdirSync(dataDirPath);
    !fs.existsSync(docDirPath) && fs.mkdirSync(docDirPath);
    if (!fs.existsSync(ifConfigPath)) {
        fs.writeFileSync(ifConfigPath, render({
            tplPath: path.join(__dirname, 'tpl/if-config.json.tpl'),
            encoding: encoding
        }), encoding);
    }
    if (!fs.existsSync(demoDataPath)) {
        fs.writeFileSync(demoDataPath, render({
            tplPath: path.join(__dirname, 'tpl/demo.data.js.tpl'),
            encoding: encoding
        }), encoding);
    }

    console.log('[ift] 接口环境初始化完成', root);
}

exports.ifSync = ifSync;
exports.ifInit = ifInit;